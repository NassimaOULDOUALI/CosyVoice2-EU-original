#!/bin/bash
#SBATCH --job-name=3000h_split_copy
#SBATCH --output=slurm-%j.out
#SBATCH --error=slurm-%j.err
#SBATCH --time=3-00:00:00
#SBATCH --partition=CPU
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=64
#SBATCH --mem=64G
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --mail-user=tim.horstmann@ip-paris.fr

# =============================================================================
# TTS Dataset Split Copy Script
# =============================================================================
# This script copies files from split definitions to create new dataset folders
# while maintaining the original directory structure.
#
# Usage: Change TRAIN_HOURS variable below and submit with sbatch
# =============================================================================

# CONFIGURATION - CHANGE THIS VARIABLE FOR DIFFERENT SPLITS
TRAIN_HOURS=3000  # Change this to: 100, 200, 500, 1000, 2000, 3000

# Paths
SOURCE_DIR="/tsi/hi-paris/tts/Luka/data/tts_dataset_combined"
SPLIT_BASE_DIR="/tsi/hi-paris/tts/Luka/data"
TARGET_DIR="/tsi/hi-paris/tts/Luka/data/tts_dataset_combined_${TRAIN_HOURS}h"

# Split definition files (generated by audio_duration_summary.py)
TRAIN_FILE="${SPLIT_BASE_DIR}/train_${TRAIN_HOURS}h_train_libri80.txt"
DEV_FILE="${SPLIT_BASE_DIR}/dev_${TRAIN_HOURS}h_train_libri80.txt"
TEST_FILE="${SPLIT_BASE_DIR}/test_${TRAIN_HOURS}h_train_libri80.txt"

echo "=================================================="
echo "TTS Dataset Split Copy - ${TRAIN_HOURS}h Training Data"
echo "=================================================="
echo "Source: $SOURCE_DIR"
echo "Target: $TARGET_DIR"
echo "Split files:"
echo "  Train: $TRAIN_FILE"
echo "  Dev:   $DEV_FILE"
echo "  Test:  $TEST_FILE"
echo "=================================================="

# Check if split files exist
for file in "$TRAIN_FILE" "$DEV_FILE" "$TEST_FILE"; do
    if [[ ! -f "$file" ]]; then
        echo "ERROR: Split file not found: $file"
        echo "Please run audio_duration_summary.py first to generate split files."
        exit 1
    fi
done

# Create target directory structure
echo "Creating target directory structure..."
mkdir -p "$TARGET_DIR"/{train,dev,test}

# Function to copy files for a specific split
copy_split_files() {
    local split_name=$1
    local split_file=$2
    local target_split_dir="${TARGET_DIR}/${split_name}"
    
    echo "Processing $split_name split..."
    
    # Count total files for progress tracking
    local total_files=$(wc -l < "$split_file")
    echo "  Total files to copy: $total_files"
    
    local count=0
    local errors=0
    
    # Read file pairs from split definition
    while IFS='|' read -r wav_path txt_path; do
        count=$((count + 1))
        
        # Show progress every 1000 files
        if (( count % 1000 == 0 )); then
            echo "    Progress: $count/$total_files files processed"
        fi
        
        # Extract relative path from source directory
        wav_rel_path=${wav_path#$SOURCE_DIR/}
        txt_rel_path=${txt_path#$SOURCE_DIR/}
        
        # Determine target paths
        target_wav="${target_split_dir}/${wav_rel_path#*/}"  # Remove original split dir
        target_txt="${target_split_dir}/${txt_rel_path#*/}"
        
        # Create target directories if they don't exist
        target_wav_dir=$(dirname "$target_wav")
        target_txt_dir=$(dirname "$target_txt")
        mkdir -p "$target_wav_dir" "$target_txt_dir"
        
        # Copy files
        if [[ -f "$wav_path" ]]; then
            cp "$wav_path" "$target_wav" || {
                echo "    WARNING: Failed to copy WAV: $wav_path"
                errors=$((errors + 1))
            }
        else
            echo "    WARNING: WAV file not found: $wav_path"
            errors=$((errors + 1))
        fi
        
        if [[ -f "$txt_path" ]]; then
            cp "$txt_path" "$target_txt" || {
                echo "    WARNING: Failed to copy TXT: $txt_path"
                errors=$((errors + 1))
            }
        else
            echo "    WARNING: TXT file not found: $txt_path"
            errors=$((errors + 1))
        fi
        
    done < "$split_file"
    
    echo "  Completed $split_name: $count files processed, $errors errors"
    return $errors
}

# Copy files for each split
total_errors=0

echo "Starting file copying process..."
start_time=$(date +%s)

copy_split_files "train" "$TRAIN_FILE"
train_errors=$?
total_errors=$((total_errors + train_errors))

copy_split_files "dev" "$DEV_FILE"
dev_errors=$?
total_errors=$((total_errors + dev_errors))

copy_split_files "test" "$TEST_FILE"
test_errors=$?
total_errors=$((total_errors + test_errors))

end_time=$(date +%s)
duration=$((end_time - start_time))

# Generate summary statistics
echo ""
echo "=================================================="
echo "COPY OPERATION SUMMARY"
echo "=================================================="
echo "Target directory: $TARGET_DIR"
echo "Total execution time: ${duration}s"
echo "Total errors: $total_errors"

# Count files in each split
for split in train dev test; do
    split_dir="${TARGET_DIR}/${split}"
    if [[ -d "$split_dir" ]]; then
        wav_count=$(find "$split_dir" -name "*.wav" | wc -l)
        txt_count=$(find "$split_dir" -name "*.txt" | wc -l)
        echo "  $split: $wav_count WAV files, $txt_count TXT files"
    fi
done

# Calculate total dataset size
echo ""
echo "Dataset size information:"
total_size=$(du -sh "$TARGET_DIR" 2>/dev/null | cut -f1)
echo "  Total size: $total_size"

for split in train dev test; do
    split_dir="${TARGET_DIR}/${split}"
    if [[ -d "$split_dir" ]]; then
        split_size=$(du -sh "$split_dir" 2>/dev/null | cut -f1)
        echo "  $split size: $split_size"
    fi
done

# Verify integrity by checking a few random files
echo ""
echo "Performing random integrity checks..."
for split in train dev test; do
    split_dir="${TARGET_DIR}/${split}"
    if [[ -d "$split_dir" ]]; then
        # Check 5 random WAV files
        random_wavs=$(find "$split_dir" -name "*.wav" | shuf -n 5)
        broken_count=0
        checked_count=0
        
        for wav_file in $random_wavs; do
            if [[ -f "$wav_file" ]]; then
                # Simple check: file size > 0 and file command doesn't report errors
                if [[ -s "$wav_file" ]] && file "$wav_file" | grep -q "WAVE\|audio"; then
                    checked_count=$((checked_count + 1))
                else
                    echo "    WARNING: Potentially broken file: $wav_file"
                    broken_count=$((broken_count + 1))
                fi
            fi
        done
        
        echo "  $split integrity check: $checked_count/$((checked_count + broken_count)) files OK"
    fi
done

if (( total_errors == 0 )); then
    echo ""
    echo "✓ SUCCESS: Dataset split copied successfully with no errors!"
    echo "  You can now use: $TARGET_DIR"
else
    echo ""
    echo "⚠ WARNING: Dataset copied with $total_errors errors."
    echo "  Please check the error messages above."
    echo "  Dataset location: $TARGET_DIR"
fi

echo "=================================================="
echo "Job completed at: $(date)"
echo "=================================================="
